//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "HAL.h"
#include "HAL_GHI_OSHW_Native_RLPLite__Procedure.h"

using namespace GHI::OSHW::Native;


HRESULT Library_HAL_GHI_OSHW_Native_RLPLite__Procedure::Invoke_Helper___I4__SZARRAY_R4__SZARRAY_I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_float param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_float_ARRAY( stack, 1, param0 ) );

        CLR_RT_TypedArray_INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 2, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param2 ) );

        INT32 retVal = RLPLite_Procedure::Invoke_Helper( pMngObj,  param0, param1, param2, hr );
        TINYCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_HAL_GHI_OSHW_Native_RLPLite__Procedure::Invoke_Helper___I4__SZARRAY_U4__SZARRAY_I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_UINT32 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 1, param0 ) );

        CLR_RT_TypedArray_INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 2, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param2 ) );

        INT32 retVal = RLPLite_Procedure::Invoke_Helper( pMngObj,  param0, param1, param2, hr );
        TINYCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_HAL_GHI_OSHW_Native_RLPLite__Procedure::Invoke_Helper___I4__SZARRAY_I4__SZARRAY_I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_INT32 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 1, param0 ) );

        CLR_RT_TypedArray_INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 2, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param2 ) );

        INT32 retVal = RLPLite_Procedure::Invoke_Helper( pMngObj,  param0, param1, param2, hr );
        TINYCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_HAL_GHI_OSHW_Native_RLPLite__Procedure::Invoke_Helper___I4__SZARRAY_U1__SZARRAY_I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_UINT8 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 1, param0 ) );

        CLR_RT_TypedArray_INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 2, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param2 ) );

        INT32 retVal = RLPLite_Procedure::Invoke_Helper( pMngObj,  param0, param1, param2, hr );
        TINYCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_HAL_GHI_OSHW_Native_RLPLite__Procedure::Invoke_Helper___I4__SZARRAY_I1__SZARRAY_I4__SZARRAY_U1( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_INT8 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT8_ARRAY( stack, 1, param0 ) );

        CLR_RT_TypedArray_INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 2, param1 ) );

        CLR_RT_TypedArray_UINT8 param2;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT8_ARRAY( stack, 3, param2 ) );

        INT32 retVal = RLPLite_Procedure::Invoke_Helper( pMngObj,  param0, param1, param2, hr );
        TINYCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    TINYCLR_NOCLEANUP();
}
