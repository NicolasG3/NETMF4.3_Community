//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "Community_Hardware_AnalogSignalGenerator.h"
#include "Community_Hardware_AnalogSignalGenerator_Community_Hardware_AnalogSignalGenerator.h"

using namespace Community::Hardware;


HRESULT Library_Community_Hardware_AnalogSignalGenerator_Community_Hardware_AnalogSignalGenerator::NativeInitialize___VOID( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        AnalogSignalGenerator::NativeInitialize( pMngObj,  hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_Community_Hardware_AnalogSignalGenerator_Community_Hardware_AnalogSignalGenerator::NativeDispose___VOID( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        AnalogSignalGenerator::NativeDispose( pMngObj,  hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_Community_Hardware_AnalogSignalGenerator_Community_Hardware_AnalogSignalGenerator::Start___VOID__I4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        INT32 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 1, param0 ) );

        AnalogSignalGenerator::Start( pMngObj,  param0, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_Community_Hardware_AnalogSignalGenerator_Community_Hardware_AnalogSignalGenerator::Start___VOID__mscorlibSystemDateTime__I4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        UINT64 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_UINT64( stack, 1, param0 ) );

        INT32 param1;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 2, param1 ) );

        AnalogSignalGenerator::Start( pMngObj,  param0, param1, hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_Community_Hardware_AnalogSignalGenerator_Community_Hardware_AnalogSignalGenerator::Stop___VOID( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        AnalogSignalGenerator::Stop( pMngObj,  hr );
        TINYCLR_CHECK_HRESULT( hr );
    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_Community_Hardware_AnalogSignalGenerator_Community_Hardware_AnalogSignalGenerator::GetChannelCount___STATIC__I4( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        INT32 retVal = AnalogSignalGenerator::GetChannelCount( hr );
        TINYCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );

    }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_Community_Hardware_AnalogSignalGenerator_Community_Hardware_AnalogSignalGenerator::GetPin___STATIC__MicrosoftSPOTHardwareMicrosoftSPOTHardwareCpuPin__MicrosoftSPOTHardwareMicrosoftSPOTHardwareCpuAnalogOutputChannel( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        INT32 param0;
        TINYCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 0, param0 ) );

        INT32 retVal = AnalogSignalGenerator::GetPin( param0, hr );
        TINYCLR_CHECK_HRESULT( hr );
        SetResult_INT32( stack, retVal );
   }
    TINYCLR_NOCLEANUP();
}

HRESULT Library_Community_Hardware_AnalogSignalGenerator_Community_Hardware_AnalogSignalGenerator::GetMinClockDivisor___STATIC__U2( CLR_RT_StackFrame& stack )
{
    TINYCLR_HEADER(); hr = S_OK;
    {
        UINT16 retVal = AnalogSignalGenerator::GetMinClockDivisor( hr );
        TINYCLR_CHECK_HRESULT( hr );
        SetResult_UINT16( stack, retVal );

    }
    TINYCLR_NOCLEANUP();
}
